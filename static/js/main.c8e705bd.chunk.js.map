{"version":3,"sources":["Services/TutorialService.js","Home/TutorialItem.jsx","Home/Tutorial.jsx","App.js","serviceWorker.js","index.js"],"names":["fetchTutorials","a","fetch","response","json","fetchTutorialByDescription","search","TutorialItem","props","data","nombre","profesor","fecha","Card","Title","Text","Tutorial","React","useState","tutorials","setTutorials","setSearch","useEffect","then","onSearch","useCallback","evt","preventDefault","onChangeSearchInput","target","value","Container","fluid","Row","Navbar","className","variant","bg","Brand","Form","onSubmit","FormControl","onChange","type","placeholder","map","t","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+UAAaA,EAAc,uCAAG,4BAAAC,EAAA,sEACHC,MAAM,4DADH,cACpBC,EADoB,gBAEbA,EAASC,OAFI,mFAAH,qDAKdC,EAA0B,uCAAG,WAAOC,GAAP,eAAAL,EAAA,sEACfC,MAAM,uEAAD,OAAwEI,IAD9D,cAChCH,EADgC,gBAEzBA,EAASC,OAFgB,mFAAH,sD,QCOxBG,EATM,SAACC,GAAW,IAAD,EACQA,EAAMC,KAAlCC,EADoB,EACpBA,OAAQC,EADY,EACZA,SAAUC,EADE,EACFA,MAC1B,OAAQ,kBAACC,EAAA,EAAD,KACA,kBAACA,EAAA,EAAKC,MAAN,KAAaJ,GACb,kBAACG,EAAA,EAAKE,KAAN,KAAYJ,GACZ,kBAACE,EAAA,EAAKE,KAAN,KAAYH,KCqCTI,G,MAvCE,WAAO,IAAD,EACeC,IAAMC,SAAS,IAD9B,mBACZC,EADY,KACDC,EADC,OAESH,IAAMC,SAAS,IAFxB,mBAEZZ,EAFY,KAEJe,EAFI,KAInBJ,IAAMK,WAAU,WACZtB,IAAiBuB,MAAK,SAAAd,GAClBW,EAAaX,QAElB,IACH,IAAMe,EAAWP,IAAMQ,aAAY,SAACC,GAChCA,EAAIC,iBACJtB,EAA2BC,GAAQiB,MAAK,SAAAd,GACpCW,EAAaX,SAGfmB,EAAsBX,IAAMQ,aAAY,SAACC,GAC3CL,EAAUK,EAAIG,OAAOC,UAGzB,OAAQ,kBAACC,EAAA,EAAD,CAAYC,OAAK,GACrB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,UAAU,SAASC,QAAQ,OAAOC,GAAG,QACzC,kBAACH,EAAA,EAAOI,MAAR,qBAGR,kBAACC,EAAA,EAAD,CAAMC,SAAUhB,GACZ,kBAACiB,EAAA,EAAD,CAAaC,SAAUd,EAAqBe,KAAK,OAAOC,YAAY,uBAAoBT,UAAU,aAClG,4BACKhB,EAAU0B,KAAI,SAAAC,GAAC,OAChB,4BACG,kBAAC,EAAD,CAAcrC,KAAMqC,aCpBxBC,EAZH,WACV,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWjC,QCGjBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c8e705bd.chunk.js","sourcesContent":["export const fetchTutorials = async () => {\r\n    const response = await fetch(\"https://rayentutorialtestapp.azurewebsites.net/tutorials\");\r\n    return await response.json();\r\n}\r\n\r\nexport const fetchTutorialByDescription = async (search) => {\r\n    const response = await fetch(`https://rayentutorialtestapp.azurewebsites.net/tutorial?description=${search}`);\r\n    return await response.json();\r\n}","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst TutorialItem = (props) => {\r\n    const { nombre, profesor, fecha } = props.data;\r\n    return (<Card>\r\n            <Card.Title>{nombre}</Card.Title>\r\n            <Card.Text>{profesor}</Card.Text>\r\n            <Card.Text>{fecha}</Card.Text>\r\n    </Card>);\r\n\r\n}\r\nexport default TutorialItem;","import React from 'react';\r\nimport { Container, Navbar, Form, FormControl, Row } from 'react-bootstrap';\r\nimport { fetchTutorials, fetchTutorialByDescription } from '../Services/TutorialService';\r\nimport TutorialItem from '../Home/TutorialItem';\r\nimport './Tutorial.css'\r\n\r\nconst Tutorial = () => {\r\n    const [tutorials, setTutorials] = React.useState([]);\r\n    const [search, setSearch] = React.useState([]);\r\n\r\n    React.useEffect(() => {\r\n        fetchTutorials().then(data => {\r\n            setTutorials(data);\r\n        })\r\n    }, [])\r\n    const onSearch = React.useCallback((evt) => {\r\n        evt.preventDefault();\r\n        fetchTutorialByDescription(search).then(data => {\r\n            setTutorials(data);\r\n        })\r\n    });\r\n    const onChangeSearchInput = React.useCallback((evt) => {\r\n        setSearch(evt.target.value);\r\n    });\r\n\r\n    return (<Container  fluid>\r\n        <Row>\r\n            <Navbar className=\"navbar\" variant=\"dark\" bg=\"dark\">\r\n                <Navbar.Brand>Tutoriales</Navbar.Brand>\r\n            </Navbar>\r\n        </Row>\r\n        <Form onSubmit={onSearch}>\r\n            <FormControl onChange={onChangeSearchInput} type=\"text\" placeholder=\"Buscar por tÃ­tulo\" className=\" mr-sm-2\" />\r\n            <ul>\r\n                {tutorials.map(t => \r\n                <li>\r\n                   <TutorialItem data={t} />\r\n                </li>)\r\n                }\r\n            </ul>\r\n        </Form>\r\n\r\n\r\n    </Container>);\r\n}\r\nexport default Tutorial;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Tutorial from './Home/Tutorial'\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/\" component={Tutorial} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}